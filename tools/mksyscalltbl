#!/usr/bin/env python3
#
# Grinch, a minimalist operating system
#
# Copyright (c) OTH Regensburg, 2024
#
# Authors:
#  Ralf Ramsauer <ralf.ramsauer@oth-regensburg.de>
#
# This work is licensed under the terms of the GNU GPL, version 2.  See
# the COPYING file in the top-level directory.

import sys

table = sys.argv[1]
fmt = sys.argv[2]
outfile = sys.argv[3]

SYS_GRINCH_BASE = 1000

nochange = "/* This file is autogenerated. DO NOT CHANGE IT. */\n\n"

syscalls = dict()
grinch_calls = dict()

def syscall_name(name, pfx=""):
    return '%sSYS_%s' % (pfx, name)


def cdef(name, val):
    return '#define %s\t\t%s\n' % (name, val)


def sysdef(name, val, pfx=""):
    return cdef(syscall_name(name, pfx), val)


def make_definitions(type, calls, pfx=""):
    ret = str()
    for no, name in sorted(calls.items()):
        if type == 'grinch':
            value = 'SYS_grinch(_SYS_%s)' % name
        else:
            value = '%u' % no

        ret += sysdef(name, value, pfx)

    return ret


def make_array(name, calls, pfx=""):
    ret = str()
    ret += "static const syscall_stub_t %s[] = {\n" % name
    for no, name in sorted(calls.items()):
        ret +=   "\t[%s] = ___sys_%s,\n" % (syscall_name(name, pfx), name)
    ret += "};\n"
    return ret


def make_stubs(calls):
    ret = str()
    for no, name in sorted(calls.items()):
        ret += 'SC_STUB_PROTO(%s);\n' % name
    ret += '\n'
    return ret


def mksource():
    stubs = make_stubs(syscalls) + make_stubs(grinch_calls)
    arrays = "%s\n%s" % (make_array("syscalls", syscalls), make_array("grinch_calls", grinch_calls, "_"))

    return stubs + arrays


def mkheader():
    ret = str()
    ret += "/* Standard almost POSIX-conform syscalls */\n"
    ret += make_definitions("syscalls", syscalls)
    ret += '\n'
    ret += "/* Custom grinch syscalls */\n"
    ret += make_definitions("syscalls", grinch_calls, "_")
    ret += sysdef('grinch_base', SYS_GRINCH_BASE)
    ret += sysdef('grinch(x)', '(SYS_grinch_base + (x))')
    ret += '\n'
    ret += make_definitions("grinch", grinch_calls)

    return ret


with open(table, 'r') as f:
    for line in f:
        line = line.strip()
        if line.startswith('#') or len(line) == 0:
            continue
        line = line.split()
        no = int(line[1])
        if no < SYS_GRINCH_BASE:
            syscalls[no] = line[0]
        else:
            grinch_calls[no - SYS_GRINCH_BASE] = line[0]

if fmt == 'header':
    out = mkheader()
elif fmt == 'source':
    out = mksource()
else:
    print('Unknown format "%s"' % fmt)
    quit(-1)

out = nochange + out

with open(outfile, 'w') as f:
    f.write(out)
